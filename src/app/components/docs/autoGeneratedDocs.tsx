'use client';
import { hideDocs, showDocs } from '@/redux/commonSlice';
import { useAppDispatch, useAppSelector } from '@/redux/hook';
import { RootState } from '@/redux/store';
import React, { useEffect, useState } from 'react';

interface Field {
  name: string;
  description?: string;
}

interface Type {
  kind: string;
  name: string;
  description?: string;
  fields?: Field[];
}

const AutoGeneratedDocs = () => {
  const { url } = useAppSelector((state: RootState) => state.editor);
  const [docs, setDocs] = useState<JSX.Element[] | null>(null);
  const show = useAppSelector((state) => state.common.isShowDocs);
  const dispatch = useAppDispatch();

  useEffect(() => {
    handleGenerateDocs();
  }, [show]);

  const hideDocumentation = () => {
    dispatch(hideDocs());
  };

  const handleGenerateDocs = async () => {
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: `
            query IntrospectionQuery {
              __schema {
                types {
                  kind
                  name
                  description
                  fields {
                    name
                    description
                  }
                }
              }
            }
          `,
        }),
      });

      const result = await response.json();

      if (result.data) {
        const generatedDocs = renderDocumentation(result.data.__schema.types);
        setDocs(generatedDocs);
      } else {
        throw new Error('No data in the response');
      }
    } catch (error) {
      console.error('Error fetching introspection data:', error);
    }
  };

  const renderDocumentation = (types: Type[]): JSX.Element[] => {
    return types
      .filter(
        (type) =>
          type.kind === 'OBJECT' &&
          type.name !== '__Schema' &&
          type.name !== '__Type'
      )
      .map((type) => (
        <div key={type.name} className="mb-8">
          <h3 className="text-2xl font-bold mb-2">{type.name}</h3>
          {type.description && (
            <p className="mb-4 text-gray-600">{type.description}</p>
          )}
          <ul>
            {type.fields &&
              type.fields.map((field) => (
                <li key={field.name} className="mb-2">
                  <strong className="mr-1">{field.name}</strong>
                  {field.description && (
                    <span className="text-gray-600">: {field.description}</span>
                  )}
                </li>
              ))}
          </ul>
        </div>
      ));
  };

  return (
    show && (
      <div className="container mx-auto p-8">
        <h2 className="text-3xl font-bold mb-6">
          Auto-Generated GraphQL Documentation
        </h2>
        <button
          onClick={hideDocumentation}
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-6"
        >
          Hide Docs
        </button>
        {docs ? <div>{docs}</div> : null}
      </div>
    )
  );
};

export default AutoGeneratedDocs;
